// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-macos11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UDFCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct DefaultActionFilter : UDFCore.ActionFilter {
  public init()
  public func include(action: UDFCore.LoggingAction) -> Swift.Bool
}
extension UDFCore.ActionFilter where Self == UDFCore.DefaultActionFilter {
  public static var `default`: any UDFCore.ActionFilter {
    get
  }
}
@_hasMissingDesignatedInitializers final public class XCTestGroup {
  public static func enter(fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  public static func leave(fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  public static func wait(fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  @objc deinit
}
public protocol WrappedReducer : UDFCore.Reducing {
  var reducer: any UDFCore.Reducing { get set }
}
extension UDFCore.WrappedReducer {
  public mutating func reduce(_ action: some Action)
}
public protocol _Component : SwiftUI.View {
  associatedtype Props
  var props: Self.Props { get }
  init(props: Self.Props)
}
public protocol ActionFilter : Swift.Sendable {
  func include(action: UDFCore.LoggingAction) -> Swift.Bool
}
public protocol ActionDescriptor : Swift.Sendable {
  func description(for action: UDFCore.LoggingAction) -> Swift.String
}
public protocol ActionLogger : Swift.Sendable {
  var actionFilters: [any UDFCore.ActionFilter] { get }
  var actionDescriptor: any UDFCore.ActionDescriptor { get }
  func log(_ action: UDFCore.LoggingAction, description: Swift.String)
}
open class StringDescribingActionDescriptor : @unchecked Swift.Sendable, UDFCore.ActionDescriptor {
  public init()
  open func description(for action: UDFCore.LoggingAction) -> Swift.String
  @objc deinit
}
public protocol _Mergeable {
  func merging(_ newValue: Self) -> Self
  func filled(from value: Self, mutate: (_ filled: inout Self, _ old: Self) -> Swift.Void) -> Self
}
public protocol AppReducer : Swift.Equatable, UDFCore.Scope {
}
public protocol IsEquatable {
  func isEqual(_ rhs: any UDFCore.IsEquatable) -> Swift.Bool
}
extension UDFCore.IsEquatable where Self : Swift.Equatable {
  public func isEqual(_ rhs: any UDFCore.IsEquatable) -> Swift.Bool
}
public protocol Action : Swift.Equatable {
}
extension UDFCore.Action {
  public func with(animation: SwiftUI.Animation?) -> some UDFCore.Action
  
}
extension UDFCore.Action {
  public func silent() -> some UDFCore.Action
  
}
public protocol Scope : UDFCore.IsEquatable {
}
public typealias EquatableScope = Swift.Equatable & UDFCore.Scope
@_functionBuilder public enum ScopeBuilder {
  public static func buildExpression<S>(_ expression: S) -> some Swift.Equatable & UDFCore.Scope where S : Swift.Equatable, S : UDFCore.Scope
  
  public static func buildExpression<R>(_ expression: R) -> some Swift.Equatable & UDFCore.Scope where R : Swift.Equatable, R : UDFCore.Reducing
  
  public static func buildExpression<R>(_ expression: R) -> some Swift.Equatable & UDFCore.Scope where R : UDFCore.AppReducer
  
  public static func buildPartialBlock<S>(first scope: S) -> some Swift.Equatable & UDFCore.Scope where S : Swift.Equatable, S : UDFCore.Scope
  
  public static func buildPartialBlock<S1, S2>(accumulated: S1, next: S2) -> some Swift.Equatable & UDFCore.Scope where S1 : Swift.Equatable, S1 : UDFCore.Scope, S2 : Swift.Equatable, S2 : UDFCore.Scope
  
}
extension UDFCore._Mergeable {
  public func filled(from value: Self, mutate: (_ filledValue: inout Self, _ oldValue: Self) -> Swift.Void) -> Self
}
public enum MiddlewareStatus : Swift.Sendable {
  case active
  case suspend
  public static func == (a: UDFCore.MiddlewareStatus, b: UDFCore.MiddlewareStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol _Form : Swift.Equatable, UDFCore.Reducing {
}
public enum Actions {
  public struct UpdateFormField<F> : UDFCore.Action where F : UDFCore._Form {
    public static func == (lhs: UDFCore.Actions.UpdateFormField<F>, rhs: UDFCore.Actions.UpdateFormField<F>) -> Swift.Bool
    public var value: any Swift.Equatable
    public var keyPath: Swift.PartialKeyPath<F>
    public init<V>(keyPath: Swift.WritableKeyPath<F, V>, value: V) where V : Swift.Equatable
  }
}
public func useStore<State>(_ stateType: State.Type, _ useBlock: @escaping (_ store: UDFCore.EnvironmentStore<State>) -> Swift.Void) where State : UDFCore.AppReducer
public protocol Initable {
  init()
}
extension Swift.Dictionary : UDFCore.Initable {
}
extension Swift.Set : UDFCore.Initable {
}
extension Swift.Array : UDFCore.Initable {
}
public typealias Command = () -> ()
public typealias CommandWith<T> = (T) -> ()
extension Foundation.ProcessInfo {
  public var xcTest: Swift.Bool {
    get
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol _Container<ContainerState> : SwiftUI.View {
  associatedtype ContainerState : UDFCore.AppReducer
  associatedtype ContainerComponent : UDFCore._Component
  func map(store: UDFCore.EnvironmentStore<Self.ContainerState>) -> Self.ContainerComponent.Props
  @UDFCore.ScopeBuilder func scope(for state: Self.ContainerState) -> any UDFCore.Scope
  func onContainerAppear(store: UDFCore.EnvironmentStore<Self.ContainerState>)
  func onContainerDisappear(store: UDFCore.EnvironmentStore<Self.ContainerState>)
  func onContainerDidLoad(store: UDFCore.EnvironmentStore<Self.ContainerState>)
}
#else
public protocol _Container : SwiftUI.View {
  associatedtype ContainerState : UDFCore.AppReducer
  associatedtype ContainerComponent : UDFCore._Component
  func map(store: UDFCore.EnvironmentStore<Self.ContainerState>) -> Self.ContainerComponent.Props
  @UDFCore.ScopeBuilder func scope(for state: Self.ContainerState) -> any UDFCore.Scope
  func onContainerAppear(store: UDFCore.EnvironmentStore<Self.ContainerState>)
  func onContainerDisappear(store: UDFCore.EnvironmentStore<Self.ContainerState>)
  func onContainerDidLoad(store: UDFCore.EnvironmentStore<Self.ContainerState>)
}
#endif
extension UDFCore._Container {
  public var store: UDFCore.EnvironmentStore<Self.ContainerState> {
    get
  }
  @_Concurrency.MainActor public var body: some SwiftUI.View {
    get
  }
}
@_functionBuilder public enum ActionGroupBuilder {
  public static func buildArray(_ components: [[any Swift.Equatable]], fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> [any Swift.Equatable]
  public static func buildBlock(_ components: [any Swift.Equatable]..., fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> [any Swift.Equatable]
  public static func buildExpression(_ expression: some Action, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> [any Swift.Equatable]
  public static func buildExpression(_ expression: Swift.Void) -> [any Swift.Equatable]
  public static func buildOptional(_ component: [any Swift.Equatable]?) -> [any Swift.Equatable]
  public static func buildEither(first component: [any Swift.Equatable]) -> [any Swift.Equatable]
  public static func buildEither(second component: [any Swift.Equatable]) -> [any Swift.Equatable]
  public static func buildLimitedAvailability(_ component: [any Swift.Equatable]) -> [any Swift.Equatable]
  public static func buildFinalResult(_ component: [any Swift.Equatable], fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> UDFCore.ActionGroup
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol Middleware<State> {
  associatedtype State : UDFCore.AppReducer
  var store: any UDFCore.Store<Self.State> { get }
  var queue: Dispatch.DispatchQueue { get set }
  init(store: some Store<State>)
  init(store: some Store<State>, queue: Dispatch.DispatchQueue)
  func status(for state: Self.State) -> UDFCore.MiddlewareStatus
  @discardableResult
  func cancel<Id>(by cancelation: Id) -> Swift.Bool where Id : Swift.Hashable
  func cancelAll()
}
#else
public protocol Middleware {
  associatedtype State : UDFCore.AppReducer
  var store: any UDFCore.Store<Self.State> { get }
  var queue: Dispatch.DispatchQueue { get set }
  init(store: some Store<State>)
  init(store: some Store<State>, queue: Dispatch.DispatchQueue)
  func status(for state: Self.State) -> UDFCore.MiddlewareStatus
  @discardableResult
  func cancel<Id>(by cancelation: Id) -> Swift.Bool where Id : Swift.Hashable
  func cancelAll()
}
#endif
@_hasMissingDesignatedInitializers @propertyWrapper @dynamicMemberLookup final public class SourceOfTruth<AppState> where AppState : UDFCore.AppReducer {
  final public var wrappedValue: AppState
  final public var projectedValue: UDFCore.SourceOfTruth<AppState> {
    get
  }
  final public subscript<R>(dynamicMember keyPath: Swift.KeyPath<AppState, R>) -> UDFCore.ReducerReference<AppState, R> where R : Swift.Equatable, R : UDFCore.Reducing {
    get
  }
  final public subscript<R>(dynamicMember keyPath: Swift.KeyPath<AppState, R>) -> UDFCore.ReducerScope<R> where R : Swift.Equatable, R : UDFCore.Reducing {
    get
  }
  @objc deinit
}
extension UDFCore.SourceOfTruth : Swift.Equatable {
  public static func == (lhs: UDFCore.SourceOfTruth<AppState>, rhs: UDFCore.SourceOfTruth<AppState>) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @dynamicMemberLookup final public class ReducerReference<AppState, Reducer> where AppState : UDFCore.AppReducer, Reducer : Swift.Equatable, Reducer : UDFCore.Reducing {
  final public var projectedValue: Reducer {
    get
    set
  }
  final public subscript<R>(dynamicMember keyPath: Swift.KeyPath<Reducer, R>) -> UDFCore.ReducerReference<AppState, R> where R : Swift.Equatable, R : UDFCore.Reducing {
    get
  }
  final public subscript<R>(dynamicMember keyPath: Swift.KeyPath<Reducer, R>) -> UDFCore.ReducerScope<R> where R : Swift.Equatable, R : UDFCore.Reducing {
    get
  }
  @objc deinit
}
extension UDFCore.ReducerReference where Reducer : UDFCore._Form {
  final public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<Reducer, T>) -> SwiftUI.Binding<T> where T : Swift.Equatable {
    get
  }
}
public struct ActionGroup : UDFCore.Action {
  public var actions: [any UDFCore.Action] {
    get
  }
  public init(action: some Action, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  public init(actions: [any UDFCore.Action], fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  public init(@UDFCore.ActionGroupBuilder _ builder: () -> UDFCore.ActionGroup)
  public init()
}
extension UDFCore.ActionGroup : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension UDFCore.ActionGroup {
  public static func == (lhs: UDFCore.ActionGroup, rhs: UDFCore.ActionGroup) -> Swift.Bool
}
extension UDFCore.ActionGroup {
  public mutating func append(action: some Action, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  public mutating func append(actions: [any UDFCore.Action], fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
}
extension UDFCore.ActionGroup {
  public mutating func insert(action: some Action, at: Swift.Int = 0, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
}
public protocol InitialSetup : UDFCore.Reducing {
  associatedtype AppState : UDFCore.AppReducer
  mutating func initialSetup(with state: Self.AppState)
}
public struct LoggingAction : Swift.CustomDebugStringConvertible {
  public let value: any UDFCore.Action
  public let fileName: Swift.String
  public let functionName: Swift.String
  public let lineNumber: Swift.Int
  public var debugDescription: Swift.String {
    get
  }
}
extension Swift.Hashable {
  public static func == (lhs: Swift.AnyHashable, rhs: Self) -> Swift.Bool
}
extension Swift.Hashable {
  public static func == (lhs: Self, rhs: Swift.AnyHashable) -> Swift.Bool
}
extension Swift.Hashable {
  public static func == (lhs: Swift.AnyHashable?, rhs: Self) -> Swift.Bool
}
extension Swift.Hashable {
  public static func == (lhs: Self, rhs: Swift.AnyHashable?) -> Swift.Bool
}
final public class EnvironmentStore<State> where State : UDFCore.AppReducer {
  @UDFCore.SourceOfTruth @_projectedValueProperty($state) final public var state: State {
    get
  }
  final public var $state: UDFCore.SourceOfTruth<State> {
    get
  }
  public init(initial state: State, loggers: [any UDFCore.ActionLogger]) throws
  convenience public init(initial state: State, logger: any UDFCore.ActionLogger) throws
  final public func dispatch(_ action: some Action, priority: UDFCore.ActionPriority = .default, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  final public func bind(_ action: some Action, priority: UDFCore.ActionPriority = .default, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> UDFCore.Command
  final public func bind<T>(_ action: @escaping (T) -> some Action, priority: UDFCore.ActionPriority = .default, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> UDFCore.CommandWith<T>
  @objc deinit
}
extension UDFCore.EnvironmentStore {
  #if compiler(>=5.3) && $AsyncAwait
  final public func subscribe(buildMiddleware: (_ store: any UDFCore.Store<State>) -> some Middleware<State>) async
  #endif
  #if compiler(>=5.3) && $Sendable
  final public func subscribeAsync(buildMiddleware: @escaping (_ store: any UDFCore.Store<State>) -> some Middleware<State>, onSubscribe: @escaping @Sendable () -> Swift.Void = {})
  #endif
}
@available(macOS 13.0.0, iOS 16.0.0, *)
extension UDFCore.EnvironmentStore {
  #if compiler(>=5.3) && $AsyncAwait
  final public func subscribe(buildMiddlewares: (_ store: any UDFCore.Store<State>) -> [any UDFCore.Middleware<State>]) async
  #endif
  #if compiler(>=5.3) && $Sendable
  final public func subscribeAsync(buildMiddlewares: @escaping (_ store: any UDFCore.Store<State>) -> [any UDFCore.Middleware<State>], onSubscribe: @escaping @Sendable () -> Swift.Void = {})
  #endif
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol Store<State> : _Concurrency.Actor {
  associatedtype State : UDFCore.AppReducer
  var state: Self.State { get }
  nonisolated func dispatch(_ action: some Action, priority: UDFCore.ActionPriority, fileName: Swift.String, functionName: Swift.String, lineNumber: Swift.Int)
}
#else
public protocol Store : _Concurrency.Actor {
  associatedtype State : UDFCore.AppReducer
  var state: Self.State { get }
  nonisolated func dispatch(_ action: some Action, priority: UDFCore.ActionPriority, fileName: Swift.String, functionName: Swift.String, lineNumber: Swift.Int)
}
#endif
extension UDFCore.Store {
  nonisolated public func dispatch(_ action: some Action, priority: UDFCore.ActionPriority = .default, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  public func bind(_ action: some Action, priority: UDFCore.ActionPriority = .default, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> UDFCore.Command
  public func bind<T>(_ action: @escaping (T) -> some Action, priority: UDFCore.ActionPriority = .default, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) -> UDFCore.CommandWith<T>
}
public enum ActionPriority : Swift.Sendable {
  case `default`
  case userInteractive
  public static func == (a: UDFCore.ActionPriority, b: UDFCore.ActionPriority) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol _ReducibleMiddleware<State> : UDFCore.Middleware {
  func reduce(_ action: some Action, for state: Self.State)
}
#else
public protocol _ReducibleMiddleware : UDFCore.Middleware {
  func reduce(_ action: some Action, for state: Self.State)
}
#endif
extension _Concurrency.Task where Success == Swift.Never, Failure == Swift.Never {
  #if compiler(>=5.3) && $AsyncAwait
  public static func sleep(seconds: Foundation.TimeInterval) async throws
  #endif
}
public struct VerboseActionFilter : UDFCore.ActionFilter {
  public init()
  public func include(action: UDFCore.LoggingAction) -> Swift.Bool
}
extension UDFCore.ActionFilter where Self == UDFCore.VerboseActionFilter {
  public static var verbose: any UDFCore.ActionFilter {
    get
  }
}
#if compiler(>=5.3) && $Actors
@_hasMissingDesignatedInitializers @globalActor public actor XCTestStoreActor {
  public static var shared: UDFCore.XCTestStoreActor {
    get
  }
  public typealias ActorType = UDFCore.XCTestStoreActor
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
#endif
@UDFCore.XCTestStoreActor final public class XCTestStore<State> where State : UDFCore.AppReducer {
  @UDFCore.SourceOfTruth @_projectedValueProperty($state) @UDFCore.XCTestStoreActor final public var state: State {
    get
    set
    _modify
  }
  @UDFCore.XCTestStoreActor final public var $state: UDFCore.SourceOfTruth<State> {
    get
  }
  @UDFCore.XCTestStoreActor public init(initial state: State) throws
  #if compiler(>=5.3) && $AsyncAwait
  @UDFCore.XCTestStoreActor final public func subscribe(build: (_ store: any UDFCore.Store<State>) -> some Middleware<State>) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 13.0.0, iOS 16.0.0, *)
  @UDFCore.XCTestStoreActor final public func subscribe(buildMiddlewares: (_ store: any UDFCore.Store<State>) -> [any UDFCore.Middleware<State>]) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @UDFCore.XCTestStoreActor final public func dispatch(_ action: some Action, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line) async
  #endif
  @UDFCore.XCTestStoreActor final public func wait(fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
  @objc deinit
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol _ObservableMiddleware<State> : UDFCore.Middleware {
  @UDFCore.ScopeBuilder func scope(for state: Self.State) -> any UDFCore.Scope
  func observe(state: Self.State)
}
#else
public protocol _ObservableMiddleware : UDFCore.Middleware {
  @UDFCore.ScopeBuilder func scope(for state: Self.State) -> any UDFCore.Scope
  func observe(state: Self.State)
}
#endif
public protocol Reducing : UDFCore.Initable, UDFCore.IsEquatable {
  mutating func reduce(_ action: some Action)
}
extension UDFCore.Reducing {
  public mutating func reduce(_ action: some Action)
}
public typealias Reducible = Swift.Equatable & UDFCore.Reducing
@objc @_inheritsConvenienceInitializers open class AsynchronousOperation : Foundation.Operation {
  @objc override dynamic public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func start()
  @objc override dynamic open func main()
  public func finish()
  public enum State : Swift.String {
    case ready
    case executing
    case finished
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var state: UDFCore.AsynchronousOperation.State {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension UDFCore.Scope where Self == UDFCore.NoneScope {
  public static var none: UDFCore.NoneScope {
    get
  }
}
public struct NoneScope : UDFCore.EquatableScope {
  public func isEqual(_ rhs: any UDFCore.IsEquatable) -> Swift.Bool
  public static func == (a: UDFCore.NoneScope, b: UDFCore.NoneScope) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class ReducerScope<R> : UDFCore.EquatableScope where R : Swift.Equatable, R : UDFCore.Reducing {
  public static func == (lhs: UDFCore.ReducerScope<R>, rhs: UDFCore.ReducerScope<R>) -> Swift.Bool
  @objc deinit
}
extension UDFCore.MiddlewareStatus : Swift.Equatable {}
extension UDFCore.MiddlewareStatus : Swift.Hashable {}
extension UDFCore.ActionPriority : Swift.Equatable {}
extension UDFCore.ActionPriority : Swift.Hashable {}
#if compiler(>=5.3) && $Actors
extension UDFCore.XCTestStoreActor : _Concurrency.GlobalActor {}
#endif
extension UDFCore.XCTestStore : Swift.Sendable {}
extension UDFCore.AsynchronousOperation.State : Swift.Equatable {}
extension UDFCore.AsynchronousOperation.State : Swift.Hashable {}
extension UDFCore.AsynchronousOperation.State : Swift.RawRepresentable {}
